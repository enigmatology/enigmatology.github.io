
<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <link href="https://enigmatology.github.io/stylesheets/style.css" rel="stylesheet">
    <link href="https://enigmatology.github.io/stylesheets/contest-mock.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <title>Contest Mock | enigmatology</title>
    
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-3170NMGK41"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'G-3170NMGK41');
    </script>
    <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js" id="MathJax-script"></script>
    
  </head>

  <body>
    <div id="navbar"></div>
    
    <div id="mock-contest">
      <div id="home-screen" class="shown">
        <div id="page-header">Mock Contest Online Testing Platform</div>
        <div id="test-choice">
          <button id="test-names" class="select-btn" onclick="toggleselectshow()">Select test</button>
          <div id="test-dropdown" class="dropdown-hidden no-border">
            <button class="test" onclick="switchtest(this)">AMC 10A</button>
            <button class="test" onclick="switchtest(this)">AMC 10B</button>
            <button class="test" onclick="switchtest(this)">AMC 12A</button>
            <button class="test" onclick="switchtest(this)">AMC 12B</button>
          </div>
          <input type="text" id="test-year" placeholder="Select year (e.g. 2021)" class="select-btn"></input>
          <input type="text" id="test-length-hours" placeholder="Select hours (e.g. 1)" class="select-btn"></input>
          <input type="text" id="test-length-minutes" placeholder="Select minutes (e.g. 15)" class="select-btn"></input>
          <button id="start-test" onclick="starttest()" class="select-btn">Generate Test</button>
        </div>
      </div>
      
      <div id="loading-screen" class="hidden">
        <div id="loading-text">Loading questions... please wait</div>
      </div>
      
      <div id="review-screen" class="hidden">
        <div id="review-heading-text"></div>
        <div id="review-score"></div>
        <button id="show-score-table" onclick="toggletablevisibility()">Show Score Report</button>
        <div id="review-answers-report"></div>
      </div>
      
      <div id="test-screen" class="hidden">
        <div id="contest-heading-text"></div>
        <div id="timer">
          <div id="clock"></div>
          <div id="settings" onmouseover="rotate(this)" onmouseout="unrotate(this)" onclick="togglesettings()"></div>
        </div>
        <div id="questions"></div>
      </div>
      
      <div id="finished-screen" class="hidden">
        <div id="finished-heading-text"></div>
        <div id="finished-score"></div>
        <button id="view-scores">View Results</button>
      </div>
      
      <div id="gray-fullscreen" class="hidden">
        <div id="settings-popup">
          <div id="close-btn" onclick="togglesettings()">Ã—</div>
          <div id="popup-header">Online Mock Contest Settings</div>
          <table style="width: 100%;">
            <tr>
              <td>Sticky Timer</td>
              <td>
                <label class="switch">
                  <input type="checkbox" id="sticky-timer-checkbox" onclick="togglestickytimer()" checked>
                  <span class="slider round"></span>
                </label>
              </td>
            </tr>
          </table>
          
          
        </div>
      </div>
    </div>
    <div id="test"></div>

    <script>
    
switchparams("AMC", 10, "A", 2005);
function getparams() {
  let url = new URLSearchParams(window.location.search);
  let test = url.get("test");
  let grade = url.get("grade");
  let version = url.get("version");
  let year = url.get("year");
  
  if (!test || !grade || !version || !year) {
    return null;
  }
  return [test, grade, version, year];
}

function switchparams(test, grade, version, year) {
  let params = new URLSearchParams();
  params.set("test", test);
  params.set("grade", grade);
  params.set("version", version);
  params.set("year", year);
  document.getElementById("test").innerHTML = params;
  
  window.history.replaceState({}, '', `${location.pathname}?${params}`);
  console.log("here");
}

function switchtest(element) {
  let button = document.getElementById("test-names");
  button.innerHTML = element.innerHTML;
  button.style.color = "black";
  toggleselectshow();
}
    
function toggleselectshow() {
  let element = document.getElementById("test-dropdown");
  if (element.classList.contains("dropdown-shown")) {
    element.classList.remove("dropdown-shown");
    window.setTimeout(function() {
      element.classList.add("no-border");
    }, 500);
  }
  else {
    element.classList.remove("no-border");
    element.classList.add("dropdown-shown");
  }
}


let problems = [];
let finishtest = false;

function toggledisplay(element) {
  if (element.classList.contains("hidden")) {
    element.classList.remove("hidden");
    element.classList.add("shown");
  }
  else {
    element.classList.remove("shown");
    element.classList.add("hidden");
  }
}

function starttest() {
  let homescreen = document.getElementById("home-screen");
  toggledisplay(homescreen);

  let testelement = document.getElementById("test-names");
  let chosentest = testelement.innerHTML;

  let yearelement = document.getElementById("test-year");
  let chosenyear = yearelement.value;  
  let year = chosenyear;

  let hourselement = document.getElementById("test-length-hours");
  let minuteselement = document.getElementById("test-length-minutes");

  let chosenhours = hourselement.value;
  let chosenminutes = minuteselement.value;

  let totalseconds = 3600*chosenhours + 60*chosenminutes;

  let test;
  let grade;
  let version;
  if (chosentest === "AMC 10A") {
    test = "AMC";
    grade = 10;
    version = "A";
  }
  else if (chosentest === "AMC 10B") {
    test = "AMC";
    grade = 10;
    version = "B";
  }
  else if (chosentest === "AMC 12A") {
    test = "AMC";
    grade = 12;
    version = "A";
  }
  else if (chosentest === "AMC 12B") {
    test = "AMC";
    grade = 12;
    version = "B";
  }
  else {
    test = "AMC";
    grade = 10;
    version = "A";
  }


  let numproblems = 0;
  if (test === "AMC") {
    numproblems = 25;
  }
  else if (test === "AIME") { // AIME is not supported yet
    numproblems = 15;
  }

  for (let i = 0; i < numproblems; i++) {
    problems.push(0);
  }

  let loading = document.getElementById("loading-screen");  
  toggledisplay(loading);



  getcontest(year, test, grade, version, numproblems, totalseconds);
}

function getcontest(year, test, grade, version, numproblems, totalseconds) {
  for (let i = 1; i <= numproblems; i++) { 
    (async () => {
      let apiurl = year + "_" + test + "_" + grade + version + "_Problems/Problem_" + i;
      problems[i-1] = await getproblem(year + "_" + test + "_" + grade + version + "_Problems/Problem_" + i, i);
      addcontent(problems, year, test, grade, version, numproblems, totalseconds);
    })()
  }
}

async function getproblem(page, problemnumber) {
  let endpoint = "https://artofproblemsolving.com/wiki/api.php";
  let params = `action=parse&page=${page}&format=json`;

  let response = await fetch(`${endpoint}?${params}&origin=*`);

  let responsejson = await response.json();

  let pagehtml = responsejson.parse.text["*"];
  if (pagehtml.includes("redirectMsg")) {
    let redirectuncutstartloc = pagehtml.indexOf("<a href=\"/wiki/index.php/") + 25;
    let redirectcut = pagehtml.substring(redirectuncutstartloc);
    let redirectcutendloc = redirectcut.indexOf("\"");
    let redirect = redirectcut.substring(0, redirectcutendloc);
    params = `action=parse&page=${redirect}&format=json`;
    response = await fetch(`${endpoint}?${params}&origin=*`);
    responsejson = await response.json();
    pagehtml = responsejson.parse.text["*"];
  }

  let searchstart = pagehtml.indexOf("id=\"Problem\">");
  let problemstartlocoriginal = pagehtml.indexOf("<p>", searchstart);
  let pagehtmlcut = pagehtml.substring(problemstartlocoriginal);
  let problemendloc = pagehtmlcut.indexOf("<h2><span");
  let problemtext = pagehtmlcut.substring(0, problemendloc);

  return convertmathjax(problemtext);
}

function convertmathjax(problemtext) {
  while (problemtext.includes("class=\"latex\"") && (problemtext.substring(problemtext.indexOf("class=\"latex\"") + 19, problemtext.indexOf("class=\"latex\"") + 24) != "[asy]")) {
    let latexstartloc = problemtext.indexOf("class=\"latex\"") + 20;
    let latexcut = problemtext.substring(latexstartloc);
    let latexendcutloc = latexcut.indexOf("\"");
    let latex = latexcut.substring(0, latexendcutloc - 1);

    let imgstartloc = problemtext.lastIndexOf("src=\"//latex.artofproblemsolving.com", latexstartloc) - 5;
    let imgcut = problemtext.substring(imgstartloc);
    let imgendcutloc = imgcut.indexOf(" />");
    let img = imgcut.substring(0, imgendcutloc + 3);

    problemtext = problemtext.replace(img, "\\(" + latex + "\\)");


  }

  while (problemtext.includes("class=\"latexcenter\"") && (problemtext.substring(problemtext.indexOf("class=\"latexcenter\"") + 25, problemtext.indexOf("class=\"latexcenter\"") + 30) != "[asy]")) {
    let latexstartloc = problemtext.indexOf("class=\"latexcenter\"") + 27;
    let latexcut = problemtext.substring(latexstartloc);
    let latexendcutloc = latexcut.indexOf("\"");
    let latex = latexcut.substring(0, latexendcutloc - 2);

    let imgstartloc = problemtext.lastIndexOf("src=\"//latex.artofproblemsolving.com", latexstartloc) - 5;
    let imgcut = problemtext.substring(imgstartloc);
    let imgendcutloc = imgcut.indexOf(" />");
    let img = imgcut.substring(0, imgendcutloc + 3);

    problemtext = problemtext.replace(img, "\\[" + latex + "\\]");

  }

  return problemtext;
}

function addcontent(problems, year, test, grade, version, numproblems, totalseconds) {    
  let readytoappend = true;
  for (let i = 0; i < problems.length; i++) {
    if (problems[i] === 0) {
      readytoappend = false;
    }
  }
  if (readytoappend) {
    let questions = document.getElementById("questions");
    for (let i = 0; i < problems.length; i++) {

      // TODO: WHEN IMPLEMENTING OTHER CONTESTS (e.g. AIME), ADD MORE TESTS
      if (test === "AMC") {
        questions.innerHTML += "<div class=\"problem\"><div class=\"bubbles\"><button onclick=\"togglecolor(this.id)\" type=\"button\" class=\"deselected\" id=\"A-button-" + i + "\">A</button><button onclick=\"togglecolor(this.id)\" type=\"button\" class=\"deselected\" id=\"B-button-" + i + "\">B</button><button onclick=\"togglecolor(this.id)\" type=\"button\" class=\"deselected\" id=\"C-button-" + i + "\">C</button><button onclick=\"togglecolor(this.id)\" type=\"button\" class=\"deselected\" id=\"D-button-" + i + "\">D</button><button onclick=\"togglecolor(this.id)\" type=\"button\" class=\"deselected\" id=\"E-button-" + i + "\">E</button></div><div class=\"problem-number\">Problem " + (i+1) + "</div><div class=\"problem-body\">" + problems[i] + "</div></div>";
      }
    }
    questions.innerHTML += "<button id=\"finish-test\" onclick=\"finishTest()\">Submit Test</button>";
    MathJax.typeset();

    let loadingdiv = document.getElementById("loading-screen");
    toggledisplay(loadingdiv);

    starttimer(year, test, grade, version, numproblems, totalseconds);
  }
}

function finishTest() {
  finishtest = true;
}

function togglecolor(id) {
  let currentproblem = id.substring(1);
  let choices = ["A", "B", "C", "D", "E"];
  let runend = true;
  for (let i = 0; i < choices.length; i++) {
    let letter = choices[i];
    let currentbtn = document.getElementById(letter + currentproblem);
    if (currentbtn.classList.contains("selected") && id === (letter + currentproblem))    		  {
      currentbtn.classList.remove("selected");
      currentbtn.classList.add("deselected");
      runend = false;
    }
    else if (currentbtn.classList.contains("selected")) {
      currentbtn.classList.remove("selected");
      currentbtn.classList.add("deselected");
    }
  }
  if (runend) {
    let nowbtn = document.getElementById(id);
    if (nowbtn.classList.contains("deselected")) {
      nowbtn.classList.remove("deselected");
      nowbtn.classList.add("selected");
    }
  }
}

function starttimer(year, test, grade, version, numproblems, totalseconds) {
  let starttime = new Date().getTime();
  let endtime = addseconds(starttime, totalseconds);

  let contesthead = document.getElementById("contest-heading-text");
  contesthead.innerHTML = year + " " + test + " " + grade + version + " Mock Contest";

  let timer = document.getElementById("clock");
  let settingsbtn = document.getElementById("settings");
  
  settingsbtn.innerHTML = "<i class=\"fa fa-gear\" style=\"font-size:30px\"></i>";

  let testscreendiv = document.getElementById("test-screen");
  toggledisplay(testscreendiv);

  let interval = setInterval(function() {
    let currenttime = new Date().getTime();
    let timetoend = endtime - currenttime;

    let hours = Math.floor((timetoend % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    let minutes = Math.floor((timetoend % (1000 * 60 * 60)) / (1000 * 60));
    let seconds = Math.floor((timetoend % (1000 * 60)) / 1000);

    if (seconds < 10) {
      seconds = "0" + seconds;
    }
    if (minutes < 10) {
      minutes = "0" + minutes;
    }
    if (hours < 10) {
      hours = "0" + hours;
    }

    timer.innerHTML = "Time Remaining: " + hours + ":" + minutes + ":" + seconds;

    if (timetoend <= 0 || finishtest === true) {
      finishtest = true;
      clearInterval(interval);

      toggledisplay(testscreendiv);
      timer.innerHTML = "CONTEST OVER";

      showresults(year, test, grade, version, numproblems);
    }

  }, 1000);
}

function addseconds(date, seconds) {
  return new Date(date + seconds*1000);
}

function showresults(year, test, grade, version, numproblems) {
  (async () => {
    let correctanswers = await getcorrectanswers(year, test, grade, version, numproblems);
    let selectedanswers = getselectedanswers(year, test, grade, version, numproblems);
    let score = checkanswers(selectedanswers, correctanswers);

    let finishedheading = document.getElementById("finished-heading-text");
    finishedheading.innerHTML = year + " " + test + " " + grade + version + " Mock Results";
    let scoreelement = document.getElementById("finished-score");
    scoreelement.innerHTML = "Final Score: " + score;

    let finishedscreen = document.getElementById("finished-screen");
    toggledisplay(finishedscreen);

    let viewreport = document.getElementById("view-scores");
    viewreport.onclick = function() {showreview(numproblems, selectedanswers, correctanswers, score, year, test, grade, version)};
  })()
}

function showreview(numproblems, selectedanswers, correctanswers, score, year, test, grade, version) {
  let finishedscreen = document.getElementById("finished-screen");
  toggledisplay(finishedscreen);

  // TODO: WHEN IMPLEMENTING OTHER CONTESTS (e.g. AIME), ADD MORE TESTS
  if (test === "AMC") {
    let letters = ["A", "B", "C", "D", "E"];
    for (let i = 0; i < numproblems; i++) {
      for (let j = 0; j < letters.length; j++) {
        let buttonid = letters[j] + "-button-" + i;
        let buttonelement = document.getElementById(buttonid);
        buttonelement.disabled = true;
        if (selectedanswers[i] != 0 && buttonelement.classList.contains("selected")) {
          if (selectedanswers[i] === correctanswers[i]) {
            buttonelement.style.backgroundColor = "#b1e6bc";
          }
          else {
            buttonelement.style.backgroundColor = "#f5958e";
          }
        }      
      }
    }
  }

  let reviewheading = document.getElementById("review-heading-text");
  reviewheading.innerHTML = year + " " + test + " " + grade + version + " Mock Results";

  let contestheading = document.getElementById("contest-heading-text");
  toggledisplay(contestheading);
  let timer = document.getElementById("timer");
  toggledisplay(timer);
  let scorediv = document.getElementById("review-score");
  scorediv.innerHTML = "Final Score: " + score;
  let testscreen = document.getElementById("test-screen");
  toggledisplay(testscreen);
  let reviewscreen = document.getElementById("review-screen");
  toggledisplay(reviewscreen);
  let submitbtn = document.getElementById("finish-test");
  toggledisplay(submitbtn);

  let answerstable = document.createElement("table");
  answerstable.setAttribute("id", "answers-table");
  answerstable.setAttribute("class", "hidden");

  let tablerow = document.createElement("tr");
  let tablecell1 = document.createElement("th");
  let tablecell2 = document.createElement("th");
  let tablecell3 = document.createElement("th");

  tablecell1.innerHTML = "Problem Number";
  tablecell2.innerHTML = "Your Answer";
  tablecell3.innerHTML = "Correct Answer";
  tablerow.appendChild(tablecell1);
  tablerow.appendChild(tablecell2);
  tablerow.appendChild(tablecell3);

  answerstable.appendChild(tablerow);
  for (let i = 0; i < numproblems; i++) {
    tablerow = document.createElement("tr");
    tablecell1 = document.createElement("td");
    tablecell2 = document.createElement("td");
    tablecell3 = document.createElement("td");

    tablecell1.innerHTML = (i+1) + ".";
    if (selectedanswers[i] === 0) {
      tablecell2.innerHTML = "Skipped";
    }
    else {
      tablecell2.innerHTML = selectedanswers[i];
    }
    tablecell3.innerHTML = correctanswers[i];

    tablerow.appendChild(tablecell1);
    tablerow.appendChild(tablecell2);
    tablerow.appendChild(tablecell3);

    answerstable.appendChild(tablerow);
  }

  let answersreport = document.getElementById("review-answers-report");
  answersreport.appendChild(answerstable);
}

function toggletablevisibility() {
  let table = document.getElementById("answers-table");
  // had to get rid of adding shown class because display: block caused weird alignment behavior
  if (table.classList.contains("hidden")) {
    table.classList.remove("hidden");
  }
  else if (!table.classList.contains("hidden")) {
    table.classList.add("hidden");
  }

  let showtablebtn = document.getElementById("show-score-table");
  if (showtablebtn.innerHTML === "Show Score Report") {
    showtablebtn.innerHTML = "Hide Score Report";
  }
  else if (showtablebtn.innerHTML === "Hide Score Report") {
    showtablebtn.innerHTML = "Show Score Report";
  }
}

function getselectedanswers(year, test, grade, version, numproblems) {
  let selectedanswers = [];
  for (let i = 0; i < numproblems; i++) {
    selectedanswers.push(0);
  }

  // TODO: WHEN IMPLEMENTING OTHER CONTESTS (e.g. AIME), ADD MORE TESTS
  if (test === "AMC") {
    let letters = ["A", "B", "C", "D", "E"];
    let buttonid;
    let currentbutton;
    for (let i = 0; i < numproblems; i++) {

      for (let j = 0; j < letters.length; j++) {
        buttonid = letters[j] + "-button-" + i;

        currentbutton = document.getElementById(buttonid);
        if (currentbutton.classList.contains("selected") && !currentbutton.classList.contains("deselected")) {
          selectedanswers[i] = letters[j];

          break;
        }
      }
    }
  }
  return selectedanswers;
}

async function getcorrectanswers(year, test, grade, version, numproblems) {
  let endpoint = "https://artofproblemsolving.com/wiki/api.php";
  let page = year + "_" + test + "_" + grade + version + "_Answer_Key";
  let params = `action=parse&page=${page}&format=json`;

  let response = await fetch(`${endpoint}?${params}&origin=*`);

  let responsejson = await response.json();

  let pagehtml = responsejson.parse.text["*"];
  if (pagehtml.includes("redirectMsg")) {
    let redirectuncutstartloc = pagehtml.indexOf("<a href=\"/wiki/index.php/") + 25;
    let redirectcut = pagehtml.substring(redirectuncutstartloc);
    let redirectcutendloc = redirectcut.indexOf("\"");
    let redirect = redirectcut.substring(0, redirectcutendloc);
    params = `action=parse&page=${redirect}&format=json`;
    response = await fetch(`${endpoint}?${params}&origin=*`);
    responsejson = await response.json();
    pagehtml = responsejson.parse.text["*"];
  }

  let correctanswers = [];  
  let cutloc;
  for (let i = 0; i < numproblems; i++) {
    cutloc = pagehtml.indexOf("<li>") + 4;
    pagehtml = pagehtml.substring(cutloc);
    correctanswers.push(pagehtml.substring(0, 1));
  }

  return correctanswers;
}

function checkanswers(selectedanswers, correctanswers) {
  let correctnum = 0;
  let skippednum = 0;
  let wrongnum = 0;
  for (let i = 0; i < selectedanswers.length; i++) {
    if (selectedanswers[i] === 0) {
      skippednum++;
    }
    else if (selectedanswers[i] === correctanswers[i]) {
      correctnum++;
    }
    else if (selectedanswers[i] != correctanswers[i]) {
      wrongnum++;
    }
  }
  let score = 6*correctnum + 1.5*skippednum;
  return score;
}

var rotating = false;
function rotate(element) {
  if (!rotating) {
    element.innerHTML = "<i class=\"fa fa-gear fa-spin\" style=\"font-size:30px\"></i>";
    rotating = true;
  }
}
function unrotate(element) {
  if (rotating) {
    element.innerHTML = "<i class=\"fa fa-gear\" style=\"font-size:30px\"></i>";
    rotating = false;
  }
}
function togglesettings() {
  let cover = document.getElementById("gray-fullscreen");
  toggledisplay(cover);
}
function togglestickytimer() {
  let timer = document.getElementById("timer");
  let checkele = document.getElementById("sticky-timer-checkbox");
  let checked = checkele.checked;
  
  if (!checked) {
    timer.style.position = "relative";
  }
  else {
    timer.style.position = "sticky";
  }
}
    </script>

    <!-- Insert these scripts at the bottom of the HTML, but before you use any Firebase services -->

    <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->
    <script src="https://www.gstatic.com/firebasejs/8.6.1/firebase-app.js"></script>
    
    <!-- TODO: Add SDKs for Firebase products that you want to use
         https://firebase.google.com/docs/web/setup#available-libraries -->
    <script src="https://www.gstatic.com/firebasejs/8.6.1/firebase-analytics.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.6.1/firebase-auth.js"></script>
    
    
    
    <script src="https://enigmatology.github.io/file-snippets/addnavbar.js"></script>
    <!---<script src="javascript/mathjax-init.js"></script>-->
</body>

</html>
