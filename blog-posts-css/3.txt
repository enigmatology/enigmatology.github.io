Lesson 1: Crashcourse on Web Design

May 24, 2021

[center][size=200][color=#3D85C6]Lesson 1[/color][/size]
[i]Crashcourse on Web Design[/i][/center]

In my opinion, knowing how to code CSS pretty much requires knowledge of how web design works. So, this lesson is going to be a very quick crashcourse on how building websites works. It's unfortunately probably going to be one of the longer tutorials because web design, well, isn't super easy.

[b][u]Introduction[/u][/b]
Client-side web design, or design that doesn't use a server (which is mainly used for creating accounts and such), consists mainly of three portions: HTML, CSS, and JavaScript. HTML stands for Hypertext Markup Language and is kind of like the framework for the website - it has all of the content that you want. CSS stands for Cascading Stylesheets and is basically only used to make things look nice. It's still really powerful and is what this tutorial is about. JavaScript is everything that is coding related - it contains all of the variables, if statements, while loops, etc. However, we don't have access to the JavaScript of AoPS blogs, so we're not going to worry about that in this tutorial.

Actually correction: we don't have access to the HTML of blogs either, but we're still going to worry about it, because CSS directly works with the HTML of a site, so it's kind of important.

[b][u]HTML Crashcourse[/u][/b]
Before we begin with CSS, I'm going to briefly go over how HTML works, so here goes :$ $P.

I'm going to start by giving a very boring example webpage. Its code looks like this:
[code=html]
<!DOCTYPE html>
<html>
  <head>
  </head>
  <body>
  </body>
</html>
[/code]
This is basically the skeleton of every single webpage that you're going to see. All webpages have this code within them. Let's try to break it down.

First, every single webpage must start with the code &lt;!DOCTYPE html&gt;. What that line effectively does is that it tells the browser that this is an HTML document. Although many browsers still theoretically render the page even without that line, it helps with compatability and such.

Next, you'll see that this looks a lot like bbCode, or the language that you write forums in. This is because HTML is a [b]tag language[/b], which bbCode also is. You specify all elements in your document using HTML tags - you start each element with &lt;&gt;, and you end it with &lt;/&gt;. Everything in between those two tags will be inside of that element.

OK, I'm now going to split this explanation into two sections:

[u]The Head[/u]
The head of a HTML document is contained in the <head></head> tags, as you can see inside of the example previously. Inside of this head will be everything that the user can't see - the CSS that styles the document, any imported fonts, etc. I'll try to be more specific on that later.

[u]The Body[/u]
The body of a HTML document is the meat of the entire thing - it's what is displayed in your browser. You put everything that you want to be seen here. For example, let's say you wanted your website to say "Hello World!" You'd do this:

[code=html]
<!DOCTYPE html>
<html>
  <head>
  </head>
  <body>
    Hello World!
  </body>
</html>
[/code]

This would display as follows:
<img src="https://i.ibb.co/qF09KxK/test1.jpg"/>
You can also use some pre-formatted tags in order to accomplish different tasks - say that you wanted to make the Hello World! very important, and on the next line, put My First HTML Program smaller. This would be done as follows:

[code=html]
<!DOCTYPE html>
<html>
  <head>
  </head>
  <body>
    <h1>Hello World!</h1>
    <p>My First HTML Program</p>
  </body>
</html>
[/code]

In this example, I used the h1 tag (which stands for header 1, the 1 indicating importance - there's also h2 for header 2 which is smaller, h3, etc.) for the Hello World! in order to raise it's importance. I used the p tag (or paragraph tag) for the simple content of the post that I wanted to show.

This would display like this:
<img src="https://i.ibb.co/n1S1xvg/test2.jpg"/>

I'm going to introduce one last tag that's particularly important, and then I'll move on, as it's very easy to find tags that do what you want - just go on Google and search up "______ tag html" and something should come up (e.g. search up "link tag html" to find how to make a hyperlink and you'll get an answer).

The last tag is very important, although it doesn't come with any display perks. It's called the div tag, and it stands for division. What it effectively is is a [b]section[/b] of HTML - think of it as a box. Everything you put inside of that &lt;div&gt;&lt;/div&gt; will go in that box. This way, it's much easier to, say, style everything in the box, as you can just style the box itself instead of needing to go in and individually style each element inside one by one. It's also very useful for organizational purposes - just like you'd want boxes on your shelves to be able to find things faster, you'd want divs in HTML in order to sort your code easier.

One thing to note is that it doesn't change the appearance of the HTML at all - for example, the following code:
[code=html]
<!DOCTYPE html>
<html>
  <head>
  </head>
  <body>
    <div>
      <h1>Hello World!</h1>
      <p>My First HTML Program</p>
    </div>
  </body>
</html>
[/code]
will display identically to the code that we previously displayed in the image above.

OK, so now we understand the basics of HTML tags. How are we going to style them? Say, what if we wanted to make the background of our webpage orange, because we love orange? We already know that the answer is CSS, but how will we integrate the CSS into the website?

This is where the head comes in. You put all CSS into your head, wrapped by <style></style> tags:
[code=html]
<!DOCTYPE html>
<html>
  <head>
    <style>
      ~INSERT CSS HERE~
    </style>
  </head>
  <body>
    <div>
      <h1>Hello World!</h1>
      <p>My First HTML Program</p>
    </div>
  </body>
</html>
[/code]
First, an important note: inside of these style tags, you're going to be putting CSS, NOT HTML tags. CSS is a different language than HTML, and you thus won't be putting HTML inside of the style tags like you would in the body.

Let's go back to the question of making the background of the webpage orange. Let me first show you how we would do this, and then I'll break it down into parts.
[code=html]
<!DOCTYPE html>
<html>
  <head>
    <style>
      body {
        background-color: orange;
      }
    </style>
  </head>
  <body>
    <div>
      <h1>Hello World!</h1>
      <p>My First HTML Program</p>
    </div>
  </body>
</html>
[/code]
OK. First, we'll see that we have the word body, followed by curly brackets - {}. This is how CSS understands WHAT you want to style - you want to style the body. So CSS will go into the html document, and say "where's the body of this HTML?" and find the <body></body> tags. CSS will then take that body, and apply all styles that we put [b]inside[/b] of the curly brackets to it. In this case, we're telling it to make the background color orange, by using background-color: orange; (we'll get more into details on that in a future lesson).

As we know that the body is the entire meat of what is displayed in the webpage, it's going to make the entire background color of the body orange, as follows:
<img src="https://i.ibb.co/m4b15zz/test3.jpg"/>
We can also do the same thing with the h1 tags, for example, by doing
[code=html]
<!DOCTYPE html>
<html>
  <head>
    <style>
      h1 {
        background-color: orange;
      }
    </style>
  </head>
  <body>
    <div>
      <h1>Hello World!</h1>
      <p>My First HTML Program</p>
    </div>
  </body>
</html>
[/code]
Note that this will make the background color of EVERY SINGLE h1 inside of your HTML document - if we had two h1s, like this:
[code=html]
<!DOCTYPE html>
<html>
  <head>
    <style>
      h1 {
        background-color: orange;
      }
    </style>
  </head>
  <body>
    <div>
      <h1>Hello World!</h1>
      <p>My First HTML Program</p>
      <h1>Another h1 tag!</h1>
    </div>
  </body>
</html>
[/code]
it will make the background color of both of those h1s orange:
<img src="https://i.ibb.co/6sKvX7s/test4.jpg"/>
You can also add multiple styles and style multiple elements, as follows (we'll get deeper into that in another lesson):
[code=html]
<!DOCTYPE html>
<html>
  <head>
    <style>
      h1 {
        background-color: orange;
        border-style: dashed;
      }
      p {
        background-color: blue;
        border-style: solid;
        border-radius: 3px;
      }
    </style>
  </head>
  <body>
    <div>
      <h1>Hello World!</h1>
      <p>My First HTML Program</p>
      <h1>Another h1 tag!</h1>
    </div>
  </body>
</html>
[/code]
which creates
<img src="https://i.ibb.co/JxKxMXn/test5.jpg"/>
Alright, now we know how to style all of one element. But this begs the question: what if we wanted to style one particular element differently, or a couple different elements differently and everything else leave normal?

The answer is HTML IDs and classes. IDs are used when there is exactly one element you want to make that style, and classes are used when there are multiple. The way you do it is add something after the label of the tag. 

I'll start with IDs. For example, let's say you wanted to add the ID of "color-orange" to the Hello World! h1 (I chose "color-orange" because that's what we want to accomplish - I could have chosen, say "bunnies," but that doesn't say much about what we're trying to do):
[code=html]
<!DOCTYPE html>
<html>
  <head>
    <style>
    </style>
  </head>
  <body>
    <div>
      <h1 id="color-orange">Hello World!</h1>
      <p>My First HTML Program</p>
      <h1>Another h1 tag!</h1>
    </div>
  </body>
</html>
[/code]
Now, we want to style this particular h1. We do this by using a [b]CSS selector[/b] - in the style tags, we'll do:
[css]
#color-orange {
  background-color: orange;
}
[/css]
First, note that this is basically the same as selecting the body tag. The only difference is the selector, or the #. This # basically tells CSS that you're looking for an ID. After the hashtag, you put the name of the ID you're looking for. Similar to styling the body, CSS will look for the element with ID color-orange, and style that element with everything inside of the curly brackets:
[code=html]
<!DOCTYPE html>
<html>
  <head>
    <style>
       #color-orange {
         background-color: orange;
       }
    </style>
  </head>
  <body>
    <div>
      <h1 id="color-orange">Hello World!</h1>
      <p>My First HTML Program</p>
      <h1>Another h1 tag!</h1>
    </div>
  </body>
</html>
[/code]
This will result in the following:
<img src="https://i.ibb.co/W3xcJcM/test6.jpg"/>
Additionally, you should not put the same id on multiple elements, as an id is supposed to style only one element. If you want to style multiple elements, you should use the class selector.

Now for classes. The way you use classes are effectively the same as ids, just with slightly different syntax:
[code=html]
<!DOCTYPE html>
<html>
  <head>
    <style>
    </style>
  </head>
  <body>
    <div>
      <h1 class="color-orange">Hello World!</h1>
      <p>My First HTML Program</p>
      <h1>Another h1 tag!</h1>
    </div>
  </body>
</html>
[/code]
However, different from ids, you style classes with a different selector: a period (.). For example, to color the background orange, you would do
[css]
.color-orange {
  background-color: orange;
}
[/css]
The full code is as follows:
[code=html]
<!DOCTYPE html>
<html>
  <head>
    <style>
      .color-orange {
        background-color: orange;
      }
    </style>
  </head>
  <body>
    <div>
      <h1 class="color-orange">Hello World!</h1>
      <p>My First HTML Program</p>
      <h1>Another h1 tag!</h1>
    </div>
  </body>
</html>
[/code]
This would result in:
<img src="https://i.ibb.co/W3xcJcM/test6.jpg"/>
Note that you can assign this class to multiple elements, such as the p element:
[code=html]
<!DOCTYPE html>
<html>
  <head>
    <style>
      .color-orange {
        background-color: orange;
      }
    </style>
  </head>
  <body>
    <div>
      <h1 class="color-orange">Hello World!</h1>
      <p class="color-orange">My First HTML Program</p>
      <h1>Another h1 tag!</h1>
    </div>
  </body>
</html>
[/code]
creating:
<img src="https://i.ibb.co/Xtg187c/test7.jpg"/>
You're able to assign classes and ids to any elements - divs, h1s, ps, h2s, etc.

And now you understand the basics of HTML! This should be enough to get you started in learning how to create a blog's CSS, which is effectively what we were working with inside of the <style></style> tags. We're lucky that we don't need to mess with anything else, as AoPS has already coded the entire HTML document, including the body and such.

Next lesson, we'll get into the actual CSS. Also, if something doesn't make sense or there's a typo, feel free to shout or leave a comment, and I'll be sure to get to it sometime in the near future :)
